procedure Gravity()
    if NOT isGrounded then
        movement = movement - gravity * Time.deltaTime
    endif
endprocedure

procedure SetPlayerDimensions(height, radius)
    previousHeight = playerCollider.height
    playerCollider.height = height
    player.transform.position = player.transform.position - Vector3(0, (previousHeight - height)/2, 0)
endprocedure

procedure Crouch()
    if lastMovementState != movementState then
        if movementState == PlayerMovementState.crouching OR movementState == PlayerMovementState.sliding then
            SetPlayerDimensions(crouchingHeight, playerRadius)
        else
            SetPlayerDimensions(standingHeight, playerRadius)
        endif
    endif
endprocedure

function CrouchControlState()
    holdCrouch = playerInputs.Player.HoldCrouch.inProgress
    if playerInputs.Player.toggleCrouch.triggered then
        if toggleCrouch == true then
            toggleCrouch = false
        else
            toggleCrouch = true
        endif
    endif
    if holdCrouch == true then
        lastHoldCrouchState = true
        return true
    else
        if lastHoldCrouchState == true then
            toggleCrouch = false
        endif
        lastHoldCrouchState = false
        return toggleCrouch
    endif
endfunction

procedure Movement()
    acceleration = baseMovementAcceleration
    target = player.rotation * inputDirection
    alignment = Vector3.Dot(groundVelocity.normalized, target.normalized)
    if groundVelocity.magnitude > maxSpeed then
        acceleration = acceleration * groundVelocity.magnitude / maxSpeed
    endif
    direction = target * maxSpeed - groundVelocity
    direction = Vector3.ProjectOnPlane(direction, groundNormal)
    direction = direction.normalized * acceleration
    direction = direction - direction * frictionMultiplier
    movement = movement + direction * Time.deltaTime
endprocedure

procedure Movement()
    inputDirection = playerInputs.Player.Movement.ReadValue<Vector2>().normalized
    if inputDirection.magnitude != 0
        if movementState != PlayerMovementState.boosting
            movementState = PlayerMovementState.walking
        endif
        float speedMultiplier = CalculateAccelerationMultiplier()
        Vector3 multipliedVelocity = new Vector2(inputDirection.x, inputDirection.y) * movementAcceleration * speedMultiplier * Time.deltaTime
        Vector3 directedVelocity = new Vector2(inputDirection.x, inputDirection.y) * movementAcceleration * 20 * Time.deltaTime
        float alignment = Vector3.Dot(player.velocity.normalized, directedVelocity.normalized)
        Vector3 lerpedVelocity = Vector3.Slerp(directedVelocity, multipliedVelocity, alignment)
        player.AddForce(new Vector3(inputDirection.x, 0, inputDirection.y) * movementAcceleration * speedMultiplier * Time.deltaTime, ForceMode.Impulse)
    endif
endprocedure

procedure Jump()
    direction = Vector3.up * jumpForce
    if velocity.y < 0 then
        direction.y = direction.y - velocity.y
    endif
    if isGrounded == true then
        movement = movement + direction
    else if airJumpsLeft > 0 then
        movement = movement + direction
        airJumpsLeft = airJumpsLeft - 1
    endif
endprocedure

procedure Boost()
    movementState = movementState.boosting
    inputDirection = playerInputs.Player.Movement.ReadValue()
    boostMovement = player.rotation * inputDirection * groundVelocity.magnitude * (boostMultiplier - 1)
    movement = movement + boostMovement
endprocedure

procedure Look()
    lookMotion = lookAction.ReadValue<Vector2> * mouseSensitivity / 20
    playerBody.rotation = playerBody.rotation * Quaternion.Euler(Vector3.up * lookMotion.x)

    verticalRotation = verticalRotation - lookMotion.movementY
    verticalRotation = Mathf.Clamp(verticalRotation, -90, 90)
    transform.localRotation = Quaternion.Euler(verticalRotation, 0, 0)
endprocedure

procedure CollisionDetected(collision)
    if collision.contacts.Length > 0 then
        for i = 0 to collision.contacts.Length - 1
            slopeAngle = Vector3.Angle(contact.normal, Vector3.up)
            airJumpsLeft = airJumpsTotal
            if slopeAngle > maxSlope then
                wallNormal = contact.normal
                Wallrun()
            else
                isGrounded = true
                groundNormal = contact.normal
            endif
        next i
    else
        isGrounded = false
        groundNormal = Vector3.up
    endif
endprocedure

function GroundCheck()
    return Physics.CheckSphere(new Vector3(player.transform.position.x, player.transform.position.y - groundDistance + (0.99f * player.transform.localScale.x * playerCollider.radius) - (player.transform.localScale.y * playerCollider.height)/2, player.transform.position.z), player.transform.localScale.x * playerCollider.radius * 0.99f, playerLayer)
endfunction